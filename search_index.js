var documenterSearchIndex = {"docs":
[{"location":"#Distance.jl","page":"Distance.jl","title":"Distance.jl","text":"","category":"section"},{"location":"#Types-and-Enums","page":"Distance.jl","title":"Types and Enums","text":"","category":"section"},{"location":"","page":"Distance.jl","title":"Distance.jl","text":"Modules = [Distances]\r\nOrder = [:type]","category":"page"},{"location":"#Distances.DistanceType","page":"Distance.jl","title":"Distances.DistanceType","text":"This enum is used to select the distance calculation type. We converted the name into a string, and the magic happens! :D\n\nDistanceType Possibilities:\n\nEuclidean, Cityblock, TotalVariation, Chebyshev,\nJaccard, BrayCurtis, SpanNormDist\n\nExamples:\n\nEuclidean::DistanceType\nCityblock::DistanceType\n\n\n\n\n\n","category":"type"},{"location":"#Functions","page":"Distance.jl","title":"Functions","text":"","category":"section"},{"location":"","page":"Distance.jl","title":"Distance.jl","text":"Modules = [Distances]\r\nOrder = [:function]","category":"page"},{"location":"#Distances.GetDistance-Tuple{DistanceType,AbstractArray{#s21,N} where N where #s21<:Number,AbstractArray{#s24,N} where N where #s24<:Number}","page":"Distance.jl","title":"Distances.GetDistance","text":"GetDistance(distanceType::DistanceType,\nv1::AbstractArray{<: Number}, v2::AbstractArray{<: Number})\n\nThis function compute distance between two numeric vectors. You can use diferents distance calculations selecting with \"DistanceType\".\n\nExamples:\n\nGetDistance(Euclidean::DistanceType, [2,2], [2,4])\nGetDistance(Cityblock::DistanceType, [2,2], [2,4])\nGetDistance(TotalVariation::DistanceType, [2,2], [2,4])\n\n\n\n\n\n","category":"method"}]
}
